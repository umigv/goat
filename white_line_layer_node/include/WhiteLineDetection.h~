#include <iostream>
#include <cstdlib>
#include <sl/Camera.hpp>
#include <opencv2/opencv.hpp>

using namespace std;
using namespace sl;

class DetectWhiteLines{

public:
  DetectWhiteLines()
  {
    xzMat = cv::Mat(WIDTH, HEIGHT, CV_8UC3, cv::Scalar(0,0,0));
    outputImage = cv::Mat(WIDTH, HEIGHT, CV_8UC3, cv::Scalar(0,0,0));
  }

  void initCamera();
  bool loadPointCloud();
  double findMinX();
  void convertXZ(double & minX);
  
  void whiteLineDetection();
  
  
  void operator()();

  void displayXZ(int time)
  {
     cv::imshow("XZ_transform",xzMat);
     cv::waitKey(time);
  }
  void displayWL(int time)
  {
     cv::imshow("WhiteLine",outputImage);
     cv::waitKey(time);
  }
  
private:
  const int MAX_X_VALUE = 10;
  const int MIN_X_VALUE = 0;
  const int MAX_Z_VALUE = 7;
  const int MIN_Z_VALUE = 0;
  const double XDIVISOR = 0.01;
  const double ZDIVISOR = 0.01;
  const int HEIGHT = 1280;
  const int WIDTH = 720;

  Camera zed;
  sl::Mat point_cloud;
  cv::Mat xzMat;
  cv::Mat whiteLineDetect;
  cv::Mat outputImage;
  
  struct Rgba {
   std::uint8_t r;
   std::uint8_t g;
   std::uint8_t b;
   std::uint8_t a;
  };

  Rgba unpack_float(float x) {
    union FloatPair {
      float f;
      Rgba rgba;
    };

    FloatPair pair{ x };

    return pair.rgba;
  }

  bool isValidPoint(float & currVal, bool isX);
};
